'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _mocha = require('mocha');

var _mocha2 = _interopRequireDefault(_mocha);

var _reporter = require('./lib/reporter');

var _reporter2 = _interopRequireDefault(_reporter);

var _runner = require('./lib/runner');

var _watcher = require('./lib/watcher');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MochaParallelTests extends _mocha2.default {
    constructor() {
        super();

        this._customRunner = (0, _runner.createInstance)();
        this._filesTotal = 0;
        this._reporterName = null;
        this._reporterOptions = null;

        // prevent uncaught exception listeners count warning
        process.setMaxListeners(0);
    }

    addFile(file) {
        (0, _watcher.addTest)(file);
        this._filesTotal++;

        return this;
    }

    reporter(reporterName, reporterOptions) {
        if (reporterName === undefined) {
            return super.reporter.call(this, reporterName, reporterOptions);
        }

        this._reporterName = reporterName;
        this._reporterOptions = reporterOptions;

        return this;
    }

    setOwnOptions(_ref) {
        let maxParallel = _ref.maxParallel,
            retry = _ref.retry;

        (0, _watcher.setOptions)({
            maxParallelTests: maxParallel,
            retryCount: retry
        });
    }

    run(callback) {
        this._customRunner.on('end', failsOccured => {
            callback(failsOccured);
        });

        (0, _watcher.runTests)({
            options: Object.assign({}, {
                reporterName: this._reporterName,
                reporterOptions: this._reporterOptions,
                reporter: _reporter2.default,
                testsLength: this._filesTotal
            }),
            throttledCalls: this._throttledCalls
        });

        return this._customRunner;
    }
}

Object.keys(_mocha2.default.prototype).forEach(key => {
    if (typeof _mocha2.default.prototype[key] !== 'function') {
        return;
    }

    // we have our own implementations of these methods
    // other methods should be saved and re-applied during runTests()
    if (key === 'run' || key === 'addFile' || key === 'reporter') {
        return;
    }

    MochaParallelTests.prototype[key] = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        // mocha calls some of its methods inside constructor
        // so MochaParallelTests own constructor function can still be in progress here
        this._throttledCalls = this._throttledCalls || [];

        this._throttledCalls.push({
            args,
            method: key
        });

        return this;
    };
});

exports.default = MochaParallelTests;
module.exports = exports['default'];